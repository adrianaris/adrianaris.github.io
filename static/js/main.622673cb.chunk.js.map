{"version":3,"sources":["reducers/noteReducer.js","components/NewNote.js","components/Notes.js","reducers/filterReducer.js","components/VisibilityFilter.js","services/notes.js","App.js","reportWebVitals.js","index.js"],"names":["initializeNotes","notes","type","data","noteReducer","state","action","concat","id","noteToChange","find","n","changedNote","important","map","note","NewNote","props","dispatch","useDispatch","onSubmit","event","preventDefault","content","target","value","Math","floor","random","createNote","name","Note","handleClick","onClick","Notes","useSelector","filter","filterChange","filterReducer","VisibilityFilter","onChange","getAll","a","axios","get","response","App","useEffect","noteService","then","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","reducer","combineReducers","store","createStore","composeWithDevTools","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.622673cb.chunk.js","sourcesContent":["const noteReducer = (state = [], action) => {\r\n    switch(action.type) {\r\n        case 'NEW_NOTE':\r\n            return state.concat(action.data)\r\n        case 'INIT_NOTES':\r\n            return action.data\r\n        case 'TOGGLE_IMPORTANCE': {\r\n            const id = action.data.id\r\n            const noteToChange = state.find(n => n.id === id)\r\n            const changedNote = {\r\n                ...noteToChange,\r\n                important: !noteToChange.important\r\n            }\r\n            return state.map(note => \r\n                note.id !== id ? note : changedNote\r\n                )\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst generateId = () => \r\n  Math.floor(Math.random() * 1000000)\r\n\r\nexport const createNote = (content) => {\r\n    return {\r\n        type: 'NEW_NOTE',\r\n        data: {\r\n            content,\r\n            important: false,\r\n            id: generateId()\r\n        }\r\n    }\r\n}\r\n\r\nexport const toggleImportanceOf = (id) => {\r\n    return {\r\n        type: 'TOGGLE_IMPORTANCE',\r\n        data: { id }\r\n    }\r\n}\r\n\r\nexport const initializeNotes = (notes) => {\r\n    return {\r\n        type: 'INIT_NOTES',\r\n        data: notes\r\n    }\r\n}\r\n\r\nexport default noteReducer","import React from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { createNote } from '../reducers/noteReducer'\r\n\r\nconst NewNote = (props) => {\r\n    const dispatch = useDispatch()\r\n    \r\n    const addNote = (event) => {\r\n        event.preventDefault()\r\n        const content = event.target.note.value\r\n        event.target.note.value = ''\r\n        dispatch(createNote(content))\r\n    }\r\n    \r\n    return (\r\n        <form onSubmit={addNote}>\r\n            <input name=\"note\" />\r\n            <button type=\"submit\">add</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default NewNote","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { toggleImportanceOf } from '../reducers/noteReducer'\r\n\r\nconst Note = ({ note, handleClick }) => {\r\n    return(\r\n        <li onClick={handleClick}>\r\n            {note.content}\r\n            <strong> {note.important ? 'important' : ''} </strong>\r\n        </li>\r\n    )\r\n}\r\n\r\nconst Notes = () => {\r\n    const dispatch = useDispatch()\r\n    const notes = useSelector(({ filter, notes})=> {\r\n        if ( filter === 'ALL' ) {\r\n            return notes\r\n        }\r\n        return filter === 'IMPORTANT'\r\n            ? notes.filter(note => note.important)\r\n            : notes.filter(note => !note.important)\r\n    })\r\n\r\n    return(\r\n        <ul>\r\n            {notes.map(note => \r\n                <Note\r\n                    key={note.id}\r\n                    note={note}\r\n                    handleClick={() => \r\n                        dispatch(toggleImportanceOf(note.id))} \r\n                />\r\n                )}\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default Notes","const filterReducer = (state = 'ALL', action) => {\r\n    switch(action.type) {\r\n        case 'SET_FILTER':\r\n            return action.filter\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const filterChange = filter => {\r\n    return {\r\n        type: 'SET_FILTER',\r\n        filter,\r\n    }\r\n}\r\n\r\nexport default filterReducer","import React from \"react\";\r\nimport { filterChange } from \"../reducers/filterReducer\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nconst VisibilityFilter = () => {\r\n    const dispatch = useDispatch()\r\n    \r\n    return (\r\n        <div>\r\n            all\r\n            <input\r\n                type=\"radio\"\r\n                name=\"filter\"\r\n                onChange={() => dispatch(filterChange('ALL'))}\r\n            />\r\n            important\r\n            <input\r\n                type=\"radio\"\r\n                name=\"filter\"\r\n                onChange={() => dispatch(filterChange('IMPORTANT'))}\r\n            />\r\n            nonimportant\r\n            <input\r\n                type=\"radio\"\r\n                name=\"filter\"\r\n                onChange={() => dispatch(filterChange('NONIMPORTANT'))}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default VisibilityFilter","import axios from 'axios'\r\n\r\nconst baseUrl = 'http://localhost:3001/notes'\r\n\r\nconst getAll = async () => {\r\n    const response = await axios.get(baseUrl)\r\n    return response.data\r\n}\r\n\r\nexport default { getAll }","import React, { useEffect } from 'react'\nimport { useDispatch } from 'react-redux'\nimport NewNote from './components/NewNote'\nimport Notes from './components/Notes'\nimport VisibilityFilter from './components/VisibilityFilter'\nimport noteService from './services/notes'\nimport { initializeNotes } from './reducers/noteReducer'\n\nconst App = () => {\n  const dispatch = useDispatch()\n  useEffect(() => {\n    noteService\n      .getAll().then(notes => dispatch(initializeNotes(notes)))\n  }, [dispatch])\n\n  return (\n    <div>\n      <NewNote />\n      <VisibilityFilter /> \n      <Notes />\n    </div>\n  )\n}\n\nexport default  App ","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { createStore, combineReducers } from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport { Provider } from 'react-redux'\nimport App from './App';\nimport noteReducer, { initializeNotes } from './reducers/noteReducer';\nimport filterReducer from './reducers/filterReducer';\nimport reportWebVitals from './reportWebVitals';\nimport noteService from './services/notes'\n\nconst reducer = combineReducers({\n  notes: noteReducer,\n  filter: filterReducer\n})\nconst store = createStore(\n  reducer,\n  composeWithDevTools()\n)\n\nnoteService.getAll().then(notes => \n  store.dispatch(initializeNotes(notes))\n)\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}